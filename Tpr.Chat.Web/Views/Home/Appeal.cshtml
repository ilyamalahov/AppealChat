@using Tpr.Chat.Core.Models
@model Tpr.Chat.Web.Models.IndexViewModel

@{
    ViewData["Title"] = "Home Page";

    var currentExpert = Model.Session.CurrentExpertKey;
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="~/css/appeal.css" />
}

@section Scripts {
    <script>
        var appealId = @Json.Serialize(Model.AppealId);
        var isWaiting = @Json.Serialize(Model.IsWaiting);
    </script>
    <script src="~/js/appeal.js"></script>
}

<partial name="Sidemenu" />

<div class="container">
    <partial name="Header" />
    <button id="stopButton" style="flex:none; padding: 5px;">Stop</button>
    <button id="startButton" style="flex:none; padding: 5px;">Start</button>
    <div class="content">
        <partial name="Sidebar" />
        <div class="main">
            <div class="main-header">
                <button id="sideMobileButton" class="custom-button side-button" title="Меню">
                    <img src="~/images/chat/three-dots.svg" alt="Меню" />
                </button>
                <div class="title-status">
                    <div class="title">Член КК <span id="expertNumber">@(currentExpert.HasValue ? "№ " + currentExpert : "отсутствует")</span></div>
                    <div class="status-block">
                        <div class="online-status" id="onlineStatus"></div>
                        <div class="write-status" id="writeStatus">Печатает...</div>
                    </div>
                </div>
                <div class="remaining-time">
                    <div id="mobileRemainingTime" class="remaining-value">00:00</div>
                    <div class="remaining-caption">минуты осталось</div>
                </div>
                <button id="mobileChangeButton" class="custom-button switch-button" title="Сменить консультанта" @(Model.IsExpertChanged ? "disabled" : "")><img src="~/images/chat/businessman.png" alt="Сменить консультанта" /></button>
            </div>
            <div style="flex: auto; display: flex; min-height: 0;">
                <ul id="messagesList" class="message-history">
                    @foreach (var message in Model.Messages)
                    {
                        var isCurrent = message.NickName == "Апеллянт";
                        var messageDate = message.CreateDate.ToString("T");

                        @switch (message.ChatMessageTypeId)
                        {
                            case ChatMessageTypes.Message:
                                var nickname = isCurrent ? "Вы" : message.NickName;
                                <li>
                                    <div class="message @(isCurrent ? "place-left" : "place-right")">
                                        <div class="message-bubble">@Html.Raw(message.MessageString)</div>@nickname <b class="message-date">@messageDate</b>
                                    </div>
                                </li>
                                break;
                            case ChatMessageTypes.Joined:
                                @if (isCurrent)
                                {
                                    <li class="message-status"><div class="message place-left">Вы подключились к консультации <b class="message-date">@messageDate</b></div></li>
                                }
                                break;
                            case ChatMessageTypes.Leave:
                                @if (isCurrent)
                                {
                                    <li class="message-status"><div class="message place-left">Вы покинули консультацию <b class="message-date">@messageDate</b></div></li>
                                }
                                break;
                            case ChatMessageTypes.ChangeExpert:
                                <li class="message-status"><div class="message place-left">@message.MessageString</div></li>
                                break;
                            case ChatMessageTypes.FirstExpert:
                                <li class="message-status"><div class="message @(isCurrent ? "place-left" : "place-right")">@message.NickName подключился к консультации. Вы можете задать ему свои вопросы</div></li>
                                break;
                            case ChatMessageTypes.EarlyComplete:
                                <li class="message-status"><div class="message @(isCurrent ? "place-left" : "place-right")">Апеллянт досрочно завершил консультацию</div></li>
                                break;
                        }
                    }
                </ul>
            </div>
            <div id="messageForm" class="main-footer">
                <textarea id="messageText" maxlength="1000" class="message-text" data-min-rows="1" rows="1" autocomplete="off" placeholder="Введите сообщение..."></textarea>
                <button id="sendButton" class="custom-button send-button"><img src="~/images/chat/send.svg" alt="Отправить" /></button>
            </div>
        </div>
    </div>
</div>

<div id="modal" style="display: none;" class="overlay modal-overlay"></div>